apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-pv
  #labels:
  # type: local
spec:
  storageClassName: local-storage
  capacity:
    storage: 2Gi
  volumeMode: Filesystem
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  local:
    path: /run/desktop/mnt/host/d/repos/k8s_redis_example/data
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - docker-desktop
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pv-claim
spec:
  storageClassName: local-storage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis
          volumeMounts:
          - name: redis-pv-claim-name
            mountPath: /data
      volumes:
        - name: redis-pv-claim-name
          persistentVolumeClaim:
            claimName: redis-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  #labels:
  #  app: redis
spec:
  selector:
    app: redis
  ports:
    - name: redis-port
      protocol: TCP
      port: 6379 # Port on LoadBalancer
      targetPort: 6379 # Port on Pod
  type: LoadBalancer
  #type: ClusterIP # IP available only inside cluster (IP also resolved by Service.name)
  #type: LoadBalancer # without cloud provider just exposes service to localhost
  #type: NodePort # exposes ports to random ports on node(localhost)
  #type: ExternalName
  #externalName: my.redis.com